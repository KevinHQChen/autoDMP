ARG VARIANT
FROM ${VARIANT}

WORKDIR "/"
# Install necessary packages available from standard repos
RUN apt-get update -qq && export DEBIAN_FRONTEND=noninteractive && \
    apt-get install -y --no-install-recommends \
    software-properties-common wget apt-utils file zip unzip pkg-config \
    openssh-client gpg-agent socat rsync \
    make ninja-build git \
    python3 python3-pip \
    yaru-theme-gtk yaru-theme-sound yaru-theme-gnome-shell yaru-theme-icon yaru-theme-unity

# setup access to ssh-agent on host
RUN apt-get update \
    && apt-get install -y --no-install-recommends ssh retry
# download public key for github.com
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

#### get project-specific dependencies
# clone private repos as needed for closed-source dependencies
RUN --mount=type=ssh git clone git@github.com:KevinHQChen/andor_sdk.git
# Andor SDK dependencies
RUN apt-get install -y libusb-1.0-0
# OpenGL, GLU, GLFW dependencies
RUN apt-get install -y libxmu-dev libxi-dev libgl-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev
#run this manually in container: cd /andor_sdk && ./install_andor
# restart PC after installing this (likely related to udev rules)

# install dependencies specific to our cpp build system
# (by default, anything you run in Docker is done as superuser, so we won't need sudo)
RUN wget --no-verbose --no-check-certificate "https://github.com/aminya/setup-cpp/releases/download/v0.19.0/setup_cpp_linux"
RUN chmod +x setup_cpp_linux
RUN ./setup_cpp_linux --compiler gcc \
    # build system tools
    --cmake true --ninja true --make true \
    # code analysis tools
    --cppcheck true --clangtidy true --clangformat true \
    # package management
    --vcpkg true \
    # code coverage
    --gcovr true \
    # cache
    --ccache true

# install any additional dependencies
RUN apt-get install -y --no-install-recommends \
# X server dependencies for cpp GUI libs
    libx11-dev libxft-dev libxext-dev libxrender-dev libxrandr-dev libxxf86vm-dev \
# additional dependencies for opencv
    nasm libgtk2.0-dev bison gperf

#### prepare project
RUN --mount=type=ssh git clone git@github.com:KevinHQChen/autoDMP.git
ARG GIT_EMAIL
ARG GIT_NAME
RUN git config --global user.email "${GIT_EMAIL}"
RUN git config --global user.name "${GIT_NAME}"
WORKDIR /autoDMP

ENTRYPOINT ["/bin/bash"]
