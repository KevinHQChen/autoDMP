FROM ubuntu:20.04

# install general dependencies
WORKDIR "/"
RUN apt-get update -qq && export DEBIAN_FRONTEND=noninteractive && \
    apt-get install -y --no-install-recommends \
    # common tools
    make pkg-config wget curl tar unzip \
    # X server dependencies for cpp GUI libs
    libx11-dev libxext-dev libxrender-dev libxrandr-dev libxxf86vm-dev \
    # additional dependencies for opencv
    nasm \
    # install dependencies of snap emacs 27.2 (current snap version of emacs)
    # (ref: https://github.com/hubisan/emacs-wsl)
    autoconf automake dbus-x11 debhelper dpkg-dev \
    libacl1-dev libasound2-dev libdbus-1-dev libgif-dev libgnutls28-dev libgpm-dev \
    libgtk-3-dev libjansson-dev libjpeg-dev liblcms2-dev liblockfile-dev libm17n-dev \
    libncurses5-dev liboss4-salsa2 libotf-dev libpng-dev librsvg2-dev \
    libselinux1-dev libsystemd-dev libtiff-dev libxml2-dev libxpm-dev procps quilt \
    sharutils texinfo zlib1g-dev gvfs language-pack-en-base libasound2 libaspell15 \
    libasyncns0 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libbrotli1 \
    libcairo-gobject2 libcairo2 libcanberra-gtk3-0 libcanberra-gtk3-module \
    libcanberra0 libcroco3 libdatrie1 libdb5.3 libdrm2 libegl1 libenchant1c2a \
    libepoxy0 libflac8 libfontconfig1 libfreetype6 libgbm1 libgdk-pixbuf2.0-0 \
    libgif7 libgl1 libglvnd0 libglx0 libgpm2 libgraphite2-3 libgstreamer-gl1.0-0 \
    libgstreamer-plugins-base1.0-0 libgstreamer1.0-0 libgtk-3-0 libgudev-1.0-0 \
    libharfbuzz-icu0 libharfbuzz0b libhyphen0 libice6 libicu66 libjansson4 \
    libjavascriptcoregtk-4.0-18 libjbig0 libjpeg-turbo8 liblcms2-2 liblockfile1 \
    libltdl7 libm17n-0 libnotify4 libnss-mdns libnss-myhostname libnss-systemd \
    libogg0 liborc-0.4-0 libotf0 libpango-1.0-0 libpangocairo-1.0-0 \
    libpangoft2-1.0-0 libpixman-1-0 libpng16-16 libpulse0 librsvg2-2 libsasl2-2 \
    libsecret-1-0 libsm6 libsndfile1 libsoup2.4-1 libssl1.1 libstdc++6 libtdb1 \
    libthai0 libtiff5 libvorbis0a libvorbisenc2 libvorbisfile3 libwayland-client0 \
    libwayland-cursor0 libwayland-egl1 libwayland-server0 libwebp6 libwebpdemux2 \
    libwoff1 libx11-6 libx11-xcb1 libxau6 libxcb-render0 libxcb-shm0 libxcb1 \
    libxcomposite1 libxcursor1 libxdamage1 libxdmcp6 libxext6 libxfixes3 libxi6 \
    libxinerama1 libxkbcommon0 libxml2 libxpm4 libxrandr2 libxrender1 libxslt1.1 \
    libyajl2 \
    # install additional dependencies needed for native comp in emacs 28+
    # (ref: https://emacs.stackexchange.com/a/60858)
    gcc-10 g++-10 libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev \
    # install doom emacs prereqs
    # (ref: https://elecming.medium.com/the-ultimate-emacs-hacking-tutorial-in-windows-10-wsl-2-cfd3ea3893e3)
    ripgrep fd-find \
    dvipng texlive latexmk texlive-plain-generic texlive-latex-extra texlive-bibtex-extra biber \
    default-jre \
    graphviz \
    # prereqs to compile emacs vterm
    libtool-bin libssl-dev \
    # dev tools
    python3-pip python3-venv meld gitk tree \
    # for llvm
    lsb-release software-properties-common gnupg \
    && rm -rf /var/lib/apt/lists/*
# Install necessary packages available from standard repos
RUN apt-get update -qq && export DEBIAN_FRONTEND=noninteractive && \
    apt-get install -y --no-install-recommends \
    software-properties-common wget apt-utils file zip unzip pkg-config \
    openssh-client gpg-agent socat rsync \
    make ninja-build git \
    python3 python3-pip \
    yaru-theme-gtk yaru-theme-sound yaru-theme-gnome-shell yaru-theme-icon yaru-theme-unity

# install dependencies specific to our cpp build system
# (by default, anything you run in Docker is done as superuser, so we won't need sudo)
# get llvm (mainly for the static analysis tools) (this is missing clang-tidy)
RUN bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
RUN wget --no-verbose --no-check-certificate "https://github.com/aminya/setup-cpp/releases/download/v0.19.0/setup_cpp_linux"
RUN chmod +x setup_cpp_linux
# (setting llvm as compiler would be nice, but vcpkg's ffmpeg cannot be built with it)
RUN ./setup_cpp_linux --compiler gcc \
    # build system tools
    --cmake true --ninja true --make true \
    # code analysis tools
    --cppcheck true --clangtidy true --clangformat true \
    # package management
    --vcpkg true \
    # code coverage
    --gcovr true \
    # cache
    --ccache true \
    # documentation
    --doxygen true

# setup access to ssh-agent on host
RUN apt-get update \
    && apt-get install -y --no-install-recommends ssh retry
# download public key for github.com
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# for emacs DAP-mode
RUN --mount=type=ssh git clone git@github.com:lldb-tools/lldb-mi.git
RUN bash -c 'cd /lldb-mi \
    &&  source ~/.cpprc \
    && cmake . \
    && cmake --build .'
RUN ln -s /lldb-mi/src/lldb-mi /usr/local/bin/lldb-mi

# get fonts
RUN wget -P ~/.local/share/fonts/ https://www.1001fonts.com/download/jetbrains-mono.zip \
    && unzip ~/.local/share/fonts/jetbrains-mono.zip -d ~/.local/share/fonts/ \
    && rm ~/.local/share/fonts/jetbrains-mono.zip

# get node (for among other things, copilot)
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
RUN . /root/.bashrc && nvm install v16.16.0

# clone, build, and install emacs 28 + doom
RUN git clone -b emacs-28 --depth 1 git://git.sv.gnu.org/emacs.git
RUN export CC=/usr/bin/gcc-10 CXX=/usr/bin/gcc-10 && cd /emacs \
    && ./autogen.sh \
    && ./configure --with-native-compilation --with-mailutils --with-json \
    # fully compile emacs ahead of time (https://www.emacswiki.org/emacs/GccEmacs#h5o-14) instead of just in time or deferred compilation - the default (https://www.emacswiki.org/emacs/GccEmacs#h5o-13)
    && make -j8 NATIVE_FULL_AOT=1 \
    && make install \
    # build and install doom emacs
    && git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d && cd ~/.emacs.d \
    && ~/.emacs.d/bin/doom install 2>&1 | tee doominstall.log

# setup doom config
RUN --mount=type=ssh cd ~/.doom.d && rm * \
    && git init \
    && git remote add origin git@github.com:KevinHQChen/doom_config.git \
    && git fetch \
    # -t makes this branch the default upstream branch (equivalent to git push -u)
    && git checkout origin/dev -ft
RUN bash -c 'retry --until=success timeout 1200 ~/.emacs.d/bin/doom sync'

# manual fixes for doom emacs
# - emoji font causes doom emacs to hang: remove config.el after install so we can access vanilla doom emacs to install emoji fonts
# - doom sync error: https://discourse.doomemacs.org/t/error-on-syncing-wrong-type-argument-string-p-afternoon-theme/3432/3
# - no icons: after fresh install, run M-x all-the-icons-install-fonts to install all-the-icons fonts
# for ipython plotting support:
    # apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev

ENTRYPOINT ["/bin/bash"]
